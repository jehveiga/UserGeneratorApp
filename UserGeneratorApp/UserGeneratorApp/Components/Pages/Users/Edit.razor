@page "/users/edit/{id:int}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject NavigationManager Navigation
@inject ILogger<User> Logger
@inject IJSRuntime Js

<div class="container">
    <h3 class="text-info col-12">Editar Usuario</h3>

    @if (UserInput is null)
    {
        <h3 class="text-info col-12 mt-3">Não foi encontrado o usuario informado!</h3>
    }
    else
    {
        <EditForm Model="@UserInput" OnValidSubmit="@OnValidSubmitAsync" class="row">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>

            <div class="col-md-8">
                <label class="col-form-label mt-4 text-black" for="inputNome">Nome do Usuário</label>
                <InputText @bind-Value="UserInput.Name" class="form-control" placeholder="Digite o nome do usuario" id="inputNome" />
                <ValidationMessage For="@(() => UserInput.Name)"></ValidationMessage>
            </div>

            <div class="col-md-8">
                <label class="col-form-label mt-4 text-black" for="inputEmail">Email</label>
                <InputText @bind-Value="UserInput.Email" class="form-control" placeholder="Digite o email" id="inputEmail" />
                <ValidationMessage For="@(() => UserInput.Email)"></ValidationMessage>
            </div>

            <div class="col-md-8">
                <label class="col-form-label mt-4 text-black" for="inputGenero">Gênero</label>
                <InputText @bind-Value="UserInput.Gender" class="form-control" placeholder="Digite o genero" id="inputGenero" />
                <ValidationMessage For="@(() => UserInput.Gender)"></ValidationMessage>
            </div>

            <div class="col-md-8">
                <label class="col-form-label mt-4 text-black" for="inpuDataNascimento">Data de Nascimento</label>
                <InputDate @bind-Value="UserInput.BirthDay" class="form-control" id="inpuDataNascimento" />
            </div>

            <div class="form-group mt-3">
                <button type="submit" class="btn btn-primary">Editar</button>
                <a href="/users" class="btn btn-warning">Cancelar</a>
            </div>
        </EditForm>
    }

</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [Inject]
    public IUserService? UserService { get; set; }

    public User UserInput { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            UserInput = await UserService.GetById(Id);

        }
        catch (Exception)
        {
            Logger.LogInformation("Falha interna do servidor");
            throw;
        }
    }

    protected async Task OnValidSubmitAsync()
    {
        try
        {
            await UserService.Edit(UserInput);
            await Js.InvokeVoidAsync("alert", "Usuario editado com sucesso");
            Navigation.NavigateTo("users");
        }
        catch (Exception)
        {
            Logger.LogInformation("Falha interna do servidor");
            throw;
        }

    }
}